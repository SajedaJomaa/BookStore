{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Msys\\\\OneDrive\\\\Desktop\\\\BookStore\\\\frontend\\\\src\\\\components\\\\BookImage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef, useCallback } from 'react';\n// import ShowAvailableBooks from './ShowAvailableBooks.js';\n// import { fetchAvailableBooks } from '../services/api-call.js';\n\n// export default function BookImage() {\n//     const [booksData, setBooksData] = useState([]);\n//     const [page, setPage] = useState(1);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const observer = useRef(null);\n\n//     useEffect(() => {\n//         const fetchBookData = async (page) => {\n//             setIsLoading(true);\n//             try {\n//                 const resData = await fetchAvailableBooks(page);\n//                 const newBooksData = resData.items.map(item => ({\n//                     id: item.id,\n//                     imageLinks: item.volumeInfo.imageLinks,\n//                     title: item.volumeInfo.title\n//                 }));\n//                 setBooksData(prevData => [...prevData, ...newBooksData]);\n//             } catch (error) {\n//                 console.error('Error fetching book data:', error.message);\n//             } finally {\n//                 setIsLoading(false);\n//             }\n//         };\n//         fetchBookData(page);\n//     }, [page]);\n\n//     const lastImageRef = useCallback(node => {\n//         if (isLoading) return;\n//         if (observer.current) observer.current.disconnect();\n\n//         observer.current = new IntersectionObserver(entries => {\n//             if (entries[0].isIntersecting && !isLoading) {\n//                 setPage(prevPage => prevPage + 1);\n//             }\n//         });\n\n//         if (node) observer.current.observe(node);\n//     }, [isLoading]);\n\n//     return (\n//         <div>\n//             <ShowAvailableBooks booksData={booksData} lastImageRef={lastImageRef} isLoading={isLoading} />\n//         </div>\n//     );\n// }\n\n// import React, { useState, useEffect, useRef, useCallback } from 'react';\n// import ShowAvailableBooks from './ShowAvailableBooks.js';\n// import { fetchAvailableBooks } from '../services/api-call.js';\n// import './Spinner.module.css';\n// export default function BookImage() {\n//     const [booksData, setBooksData] = useState([]);\n//     const [page, setPage] = useState(1);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const observer = useRef(null);\n\n//     useEffect(() => {\n//         const fetchBookData = async (page) => {\n//             setIsLoading(true); // Set loading state to true before fetching\n//             try {\n//                 const resData = await fetchAvailableBooks(page);\n//                 const newBooksData = resData.items.map(item => ({\n//                     id: item.id,\n//                     imageLinks: item.volumeInfo.imageLinks,\n//                     title: item.volumeInfo.title\n//                 }));\n//                 setBooksData(prevData => [...prevData, ...newBooksData]);\n//             } catch (error) {\n//                 console.error('Error fetching book data:', error.message);\n//             } finally {\n//                 setIsLoading(false); // Set loading state to false after fetching\n//             }\n//         };\n\n//         fetchBookData(page);\n//     }, [page]);\n\n//     const lastImageRef = useCallback(node => {\n//         if (isLoading) return; // Do not observe if loading\n//         if (observer.current) observer.current.disconnect();\n\n//         observer.current = new IntersectionObserver(entries => {\n//             if (entries[0].isIntersecting && !isLoading) {\n//                 setPage(prevPage => prevPage + 1);\n//             }\n//         });\n\n//         if (node) observer.current.observe(node);\n//     }, [isLoading]);\n\n//     return (\n//         <div>\n//             <ShowAvailableBooks booksData={booksData} lastImageRef={lastImageRef} isLoading={isLoading} />\n//             {isLoading && <div className=\"spinner\"> {/* Show spinner when loading */}\n//                 <div className=\"double-bounce1\"></div>\n//                 <div className=\"double-bounce2\"></div>\n//             </div>}\n//         </div>\n//     );\n// }\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport ShowAvailableBooks from './ShowAvailableBooks.js';\nimport { fetchAvailableBooks } from '../services/api-call.js';\nimport './Spinner.module.css'; // Make sure the CSS file is properly imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BookImage() {\n  _s();\n  const [booksData, setBooksData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [isLoading, setIsLoading] = useState(false);\n  const observer = useRef(null);\n  useEffect(() => {\n    const fetchBookData = async () => {\n      setIsLoading(true); // Set loading state to true before fetching\n      try {\n        const resData = await fetchAvailableBooks(page);\n        const newBooksData = resData.items.map(item => ({\n          id: item.id,\n          imageLinks: item.volumeInfo.imageLinks,\n          title: item.volumeInfo.title\n        }));\n        setBooksData(prevData => [...prevData, ...newBooksData]);\n      } catch (error) {\n        console.error('Error fetching book data:', error.message);\n      } finally {\n        setIsLoading(false); // Set loading state to false after fetching\n      }\n    };\n    fetchBookData(); // Call the fetch function\n  }, [page]); // Dependency on page to fetch data when page changes\n\n  const lastImageRef = useCallback(node => {\n    if (isLoading) return; // Prevent fetching if loading\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        setPage(prevPage => prevPage + 1); // Increment page for pagination\n      }\n    });\n    if (node) observer.current.observe(node); // Observe the last image\n  }, [isLoading]); // Depend on isLoading to manage fetching\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ShowAvailableBooks, {\n      booksData: booksData,\n      lastImageRef: lastImageRef,\n      isLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this);\n}\n_s(BookImage, \"zociu901xs3ZVRacbVSt2rhAJTg=\");\n_c = BookImage;\nvar _c;\n$RefreshReg$(_c, \"BookImage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","ShowAvailableBooks","fetchAvailableBooks","jsxDEV","_jsxDEV","BookImage","_s","booksData","setBooksData","page","setPage","isLoading","setIsLoading","observer","fetchBookData","resData","newBooksData","items","map","item","id","imageLinks","volumeInfo","title","prevData","error","console","message","lastImageRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPage","observe","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Msys/OneDrive/Desktop/BookStore/frontend/src/components/BookImage.js"],"sourcesContent":["// import React, { useState, useEffect, useRef, useCallback } from 'react';\r\n// import ShowAvailableBooks from './ShowAvailableBooks.js';\r\n// import { fetchAvailableBooks } from '../services/api-call.js';\r\n\r\n// export default function BookImage() {\r\n//     const [booksData, setBooksData] = useState([]);\r\n//     const [page, setPage] = useState(1);\r\n//     const [isLoading, setIsLoading] = useState(false);\r\n//     const observer = useRef(null);\r\n\r\n//     useEffect(() => {\r\n//         const fetchBookData = async (page) => {\r\n//             setIsLoading(true);\r\n//             try {\r\n//                 const resData = await fetchAvailableBooks(page);\r\n//                 const newBooksData = resData.items.map(item => ({\r\n//                     id: item.id,\r\n//                     imageLinks: item.volumeInfo.imageLinks,\r\n//                     title: item.volumeInfo.title\r\n//                 }));\r\n//                 setBooksData(prevData => [...prevData, ...newBooksData]);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching book data:', error.message);\r\n//             } finally {\r\n//                 setIsLoading(false);\r\n//             }\r\n//         };\r\n//         fetchBookData(page);\r\n//     }, [page]);\r\n\r\n//     const lastImageRef = useCallback(node => {\r\n//         if (isLoading) return;\r\n//         if (observer.current) observer.current.disconnect();\r\n\r\n//         observer.current = new IntersectionObserver(entries => {\r\n//             if (entries[0].isIntersecting && !isLoading) {\r\n//                 setPage(prevPage => prevPage + 1);\r\n//             }\r\n//         });\r\n\r\n//         if (node) observer.current.observe(node);\r\n//     }, [isLoading]);\r\n\r\n//     return (\r\n//         <div>\r\n//             <ShowAvailableBooks booksData={booksData} lastImageRef={lastImageRef} isLoading={isLoading} />\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\n// import React, { useState, useEffect, useRef, useCallback } from 'react';\r\n// import ShowAvailableBooks from './ShowAvailableBooks.js';\r\n// import { fetchAvailableBooks } from '../services/api-call.js';\r\n// import './Spinner.module.css';\r\n// export default function BookImage() {\r\n//     const [booksData, setBooksData] = useState([]);\r\n//     const [page, setPage] = useState(1);\r\n//     const [isLoading, setIsLoading] = useState(false);\r\n//     const observer = useRef(null);\r\n\r\n//     useEffect(() => {\r\n//         const fetchBookData = async (page) => {\r\n//             setIsLoading(true); // Set loading state to true before fetching\r\n//             try {\r\n//                 const resData = await fetchAvailableBooks(page);\r\n//                 const newBooksData = resData.items.map(item => ({\r\n//                     id: item.id,\r\n//                     imageLinks: item.volumeInfo.imageLinks,\r\n//                     title: item.volumeInfo.title\r\n//                 }));\r\n//                 setBooksData(prevData => [...prevData, ...newBooksData]);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching book data:', error.message);\r\n//             } finally {\r\n//                 setIsLoading(false); // Set loading state to false after fetching\r\n//             }\r\n//         };\r\n\r\n//         fetchBookData(page);\r\n//     }, [page]);\r\n\r\n//     const lastImageRef = useCallback(node => {\r\n//         if (isLoading) return; // Do not observe if loading\r\n//         if (observer.current) observer.current.disconnect();\r\n\r\n//         observer.current = new IntersectionObserver(entries => {\r\n//             if (entries[0].isIntersecting && !isLoading) {\r\n//                 setPage(prevPage => prevPage + 1);\r\n//             }\r\n//         });\r\n\r\n//         if (node) observer.current.observe(node);\r\n//     }, [isLoading]);\r\n\r\n//     return (\r\n//         <div>\r\n//             <ShowAvailableBooks booksData={booksData} lastImageRef={lastImageRef} isLoading={isLoading} />\r\n//             {isLoading && <div className=\"spinner\"> {/* Show spinner when loading */}\r\n//                 <div className=\"double-bounce1\"></div>\r\n//                 <div className=\"double-bounce2\"></div>\r\n//             </div>}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport ShowAvailableBooks from './ShowAvailableBooks.js';\r\nimport { fetchAvailableBooks } from '../services/api-call.js';\r\nimport './Spinner.module.css'; // Make sure the CSS file is properly imported\r\n\r\nexport default function BookImage() {\r\n    const [booksData, setBooksData] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const observer = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const fetchBookData = async () => {\r\n            setIsLoading(true); // Set loading state to true before fetching\r\n            try {\r\n                const resData = await fetchAvailableBooks(page);\r\n                const newBooksData = resData.items.map(item => ({\r\n                    id: item.id,\r\n                    imageLinks: item.volumeInfo.imageLinks,\r\n                    title: item.volumeInfo.title\r\n                }));\r\n                setBooksData(prevData => [...prevData, ...newBooksData]);\r\n            } catch (error) {\r\n                console.error('Error fetching book data:', error.message);\r\n            } finally {\r\n                setIsLoading(false); // Set loading state to false after fetching\r\n            }\r\n        };\r\n\r\n        fetchBookData(); // Call the fetch function\r\n    }, [page]); // Dependency on page to fetch data when page changes\r\n\r\n    const lastImageRef = useCallback(node => {\r\n        if (isLoading) return; // Prevent fetching if loading\r\n        if (observer.current) observer.current.disconnect();\r\n\r\n        observer.current = new IntersectionObserver(entries => {\r\n            if (entries[0].isIntersecting) {\r\n                setPage(prevPage => prevPage + 1); // Increment page for pagination\r\n            }\r\n        });\r\n\r\n        if (node) observer.current.observe(node); // Observe the last image\r\n    }, [isLoading]); // Depend on isLoading to manage fetching\r\n\r\n    return (\r\n        <div>\r\n            <ShowAvailableBooks booksData={booksData} lastImageRef={lastImageRef} isLoading={isLoading} />\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}